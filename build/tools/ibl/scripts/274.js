"use strict";(self.webpackChunk_babylonjs_texture_tools=self.webpackChunk_babylonjs_texture_tools||[]).push([[274],{274:(e,n,r)=>{r.r(n),r.d(n,{hdrFilteringPixelShaderWGSL:()=>a});var t=r(9610);r(9702),r(5136),r(5052),r(8866);const i="hdrFilteringPixelShader",u="#include<helperFunctions>\n#include<importanceSampling>\n#include<pbrBRDFFunctions>\n#include<hdrFilteringFunctions>\nuniform alphaG: f32;var inputTextureSampler: sampler;var inputTexture: texture_cube<f32>;uniform vFilteringInfo: vec2f;uniform hdrScale: f32;varying direction: vec3f;@fragment\nfn main(input: FragmentInputs)->FragmentOutputs {var color: vec3f=radiance(uniforms.alphaG,inputTexture,inputTextureSampler,input.direction,uniforms.vFilteringInfo);fragmentOutputs.color= vec4f(color*uniforms.hdrScale,1.0);}";t.l.ShadersStoreWGSL[i]||(t.l.ShadersStoreWGSL[i]=u);const a={name:i,shader:u}}}]);